#include <bits/stdc++.h>

#define mp make_pair
#define mt make_tuple
#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define for1(i, n) for (int i = 1; i <= (int)(n); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)
#define in() freopen("in.txt","r",stdin)
#define out() freopen("out.txt","w",stdout)
#define err() freopen("err.txt","w",stderr)


using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpi;
typedef vector<vpi> vvpi;
typedef vector<vi> vvi;
typedef long long i64;
typedef vector<i64> vi64;
typedef vector<vi64> vvi64;
typedef pair<i64, i64> pi64;
typedef double ld;

vvpi g;

const int maxn = 2*10010;

void cr(const int &tgt,const int &src){
	queue<int> q;
	q.push(tgt);
	g.assign(maxn,pvi());
  int vis[maxn][2];
  memset(vis,0,sizeof vis);
  int MAX = max(src,tgt);
  while(!q.empty()){
			 int v,u = q.front();q.pop();
			 if(u>MAX)break;
			 if(u%2==0 && vis[u][1]==0){
					g[u].pb(mp(u>>1,2));
					q.push(u>>1);
					vis[u][1] = 1;
			 }
			 if(u+1<maxn && vis[u][0]==0 ){
					g[u].pb(mp(u+1,1));
					q.push(u+1);
					vis[u][0]=1;
			 }
  }

  int newSrc = min(src,tgt);
  int newTgt = max(src,tgt);
	priority_queue<pii, vpi , greater> pq;
	pq.push(mp(0,newSrc));
  int vvis[maxn];
  memset(vvis,0,sizeof vvis);
  vvis[newSrc] = 1;
  while(!q.empty()){
			pii u = qq.front();qq.pop();
			if(vvis[u.se]> u.fi)continue;
			if(u.se == newTgt){
					cout << vvis[u.se] -1 << endl;
					return;
			}
			for(pii v : g[u]){
					if(vvis[u.se] + v.fi < vvis[v.se]){
						vvis[v.se] = vvis[u.se] + v.fi;
						pq.push(mp(vvis[v.se],v.se));
					}
			}
  }


  forn(i,g.size()){
			cerr << "u : " << i << " v : ";
			if(i>max(tgt,src)*2)break;
			forn(j,g[i].size()){
					cerr << g[i][j] << " ";
			}
			cerr << endl;
  }
}


int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;
    in();
    err();
    int src,tgt;
    cin >> src >> tgt;
		cr(tgt,src);
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";

    return 0;
}
