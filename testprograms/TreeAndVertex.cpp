#include<bits/stdc++.h>


using namespace std;



class TreeAndVertex {
public:
	int maxn = 110;
	int on[120];
	int vis[120];
	vector<vector <int> > graph;
	int get(vector <int> tree) {
		int len = tree.size();
    graph.assign(len+5, vector<int>());
    for(int i = 0 ;  i < len; i++){
				graph[tree[i]].push_back(i+1);
				graph[i+1].push_back(tree[i]);
    }
//    for(int i = 0 ; i<graph.size(); i++){
//			cout << " Node i : " << i << " -> ";
//			for(int j = 0 ; j < graph[i].size(); j++){
//				cout << graph[i][j] << " ";
//			}
//			cout << endl;
//    }
    memset(on,1,sizeof on);
    int longest = -1e9;
    for(int i = 0 ; i<=len;i++){
				on[i] = 0;
				memset(vis,0,sizeof vis);
				int component = 0;
        for(int j  =  0 ; j<=len ; j++){
//							cerr <<"Node j : " << j << " vis : " << vis[j] << " on : " << on[j] << endl;
							if(i==j)continue;
							if(!vis[j] && on[j]){
									component++;
//									cerr << "Entre" << endl;
									dfs(j);
							}
        }
        on[i] = 1;
        longest = max(longest,component);
    }
		return longest;
	}

	void dfs(const int &u){
			vis[u] = 1;
			
			for(int i = 0 ; i< graph[u].size();i++){
					int v = graph[u][i];
					if(on[v] && !vis[v]){
						dfs(v);
					}
			}
	}

};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	TreeAndVertex *obj;
	int answer;
	obj = new TreeAndVertex();
	clock_t startTime = clock();
	answer = obj->get(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,0,0,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,1,2,0,1,5,6,1,7,4,2,5,5,8,6,2,14,12,18,10,0,6,18,2,20,11,0,11,7,12,17,3,18,31,14,34,30,11,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
